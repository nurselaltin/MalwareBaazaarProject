using Entities.Concrete;
using MalwareBaazaarConsole.Model;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Text;

namespace MalwareBaazaarConsole.Services
{
    public  class MalwareBaazaarService
    {



        public string recentHashUrl { get; set; }

        public string hashInfoUrl { get; set; }

        public List<string> HashList { get; set; }

        public string Api_Key { get; set; }





        public MalwareBaazaarService(string api_Key)
        {
            Api_Key = api_Key;
        }


        public List<string> GetHashes(string recentHashUrl)
        {

            var client = new RestClient(recentHashUrl);
            RestRequest request = new RestRequest(Method.GET);

            var result = client.Execute(request);



            Helper helper = new Helper();
            var hashes = helper.ParseHashes(result.Content);

            return hashes;

        }



        public Hash GetHashData(string Hash, string hashInfoUrl)
        {


            var client = new RestClient(hashInfoUrl);

            RestRequest request = new RestRequest(Method.POST);

            request.AddHeader("API-KEY", Api_Key);

         
            request.AddParameter("query", "get_info");
            request.AddParameter("hash", Hash);



            var response = client.Execute(request);

            JObject json = JObject.Parse(response.Content);
            var data = json["data"].Value<JArray>().ToString();

            

            List<MalwareBaazaarHashModel> hashes = JsonConvert.DeserializeObject<List<MalwareBaazaarHashModel>>(data, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });

            Hash hash = new Hash() {};
            hash.first_seen = hashes[0].first_seen;
            hash.md5_hash = hashes[0].md5_hash;
            hash.sha1_hash = hashes[0].sha1_hash;
            hash.sha256_hash = hashes[0].sha256_hash;
            hash.signature = hashes[0].signature;
            if (hashes[0].tags != null)
            {
                hash.tags = (hashes[0].tags.Count > 1) ? hashes[0].tags[0] + " ," + hashes[0].tags[1] : hashes[0].tags[0];
            }
            else
            {
                hash.tags = null;
            }
               



            return hash;


         
        }





    }
}
