using Business.Abstract;
using Entities.Concrete;
using MalwareBaazaarWebApp.Models;
using MalwareBaazaarWebApp.Utilities;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace MalwareBaazaarWebApp.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        IHashService _hashService;

        public User _user { get; set; }



        public HomeController(ILogger<HomeController> logger, IHashService hashService)
        {
            _logger = logger;

            _user = new User();
            _user.username = "admin";
            _user.password = "123";

            _hashService = hashService;
        }

        //public IActionResult Index()
        //{

        //    var hashes = _hashService.GetAll();

        //    Helper helper = new Helper();
        //    hashes = helper.EditHashData(hashes);
            


        //    return View(hashes);
        //}

        public IActionResult DatatableIndex()
        {

            return View();
        }

        public JsonResult GetHashes()
        {
            string length = Request.Form["length"].FirstOrDefault();
            string start = Request.Form["start"].FirstOrDefault();

            int pageSize = length != null ? Convert.ToInt32(length) : 0;
            int skipRecords = start != null ? Convert.ToInt32(start) : 0;

            var count = _hashService.GetAll().Count();
            IEnumerable<Hash> hashes = _hashService.GetAll(pageSize, skipRecords);

            Helper helper = new Helper();

            hashes = helper.EditHashData(hashes);

            return Json(new { data = hashes, recordsFiltered = count, recordsTotal = hashes.Count() });

        }
        public IActionResult LoginView()
        {
            return View();
        }


        public IActionResult Login(User user)
        {


            if(user.username == _user.username && user.password == _user.password)
            {

                return RedirectToAction("DatatableIndex");
            }
            else
            {
                return RedirectToAction("Error");
            }   
        }

        public IActionResult Remove(int id)
        {
            var hash = _hashService.Get(id);

           _hashService.Delete(hash);

            return RedirectToAction("Index");

        }

   
        public IActionResult Update(Hash hash)
        {
            hash.first_seen = Convert.ToDateTime(hash.first_seen);

            _hashService.Update(hash);


            return RedirectToAction("Index");

        }

        public IActionResult UpdateView(int id)
        {
           var hash = _hashService.Get(id);

            return View(hash);

        }


     

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}
